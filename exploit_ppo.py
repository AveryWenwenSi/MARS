from mars.utils.func import LoadYAML2Dict, UpdateDictAwithB
from mars.utils.data_struct import AttrDict
from mars.env.import_env import make_env
from mars.rollout import rollout
from mars.rl.agents import *
from mars.rl.agents.multiagent import MultiAgent
from mars.utils.func import get_general_args, get_latest_file_in_folder
from mars.utils.common import SelfplayBasedMethods

### Load configurations
game_type = 'pettingzoo'
game = ['boxing_v1', 'surround_v1', 'combat_plane_v1', 'pong_v2', 'tennis_v2', 'combat_tank_v1', 'ice_hockey_v1'][1]
method = ['selfplay', 'nash_dqn', 'nash_dqn_exploiter', 'nash_ppo'][-1]

args = get_general_args(game_type+'_'+game, method)
print(args)

## Change/specify some arguments if necessary
args.against_baseline = False
args.test = False
args.exploit = True
args.render = True
# folder = f'../data/model/20211109_1530/{game_type}_{game}_{method}/'
# folder = f'../data/model/0/{game_type}_{game}_{method}/'
# folder = f'../data/model/20211205_2241/{game_type}_{game}_{method}/'
folder = f'../data/model/20211205_2243/{game_type}_{game}_{method}/'

if method in SelfplayBasedMethods:
    file_path = get_latest_file_in_folder(folder)
else:
    file_path = get_latest_file_in_folder(folder, id=0)  # load from the first agent model of the two
args.load_model_full_path = file_path

### Create env
env = make_env(args)
print(env)

### Specify models for each agent
trained_model = eval(args.algorithm)(env, args)
ppo_args = LoadYAML2Dict(f'mars/confs/{game_type}/ppo_exploit', toAttr=True, mergeWith=None)
exploiter_args =  AttrDict(UpdateDictAwithB(args, ppo_args, withOverwrite=True))
exploiter = PPO(env, exploiter_args)
exploiter.reinit()
trained_model.fix()

model = MultiAgent(env, [trained_model, exploiter], exploiter_args)

### Rollout
rollout(env, model, exploiter_args)