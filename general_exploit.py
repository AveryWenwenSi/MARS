from mars.utils.common import SelfplayBasedMethods
from mars.env.import_env import make_env
from mars.rollout import rollout
from mars.rl.agents  import *
from mars.rl.agents.multiagent import MultiAgent
from mars.utils.func import get_general_args, get_latest_file_in_folder
import argparse
import os
parser = argparse.ArgumentParser(description='Arguments of the general launching script for MARS.')


def launch_rollout(env, method, load_id, save_id):
    args = get_general_args(env, method)

    # exploitation setting
    args.max_episodes = 10000  # exploitation episodes
    args.against_baseline = False
    args.test = False
    # args.render = True
    args.exploit = True

    folder = f'../data/model/{load_id}/{env}_{method}/'
    if method in SelfplayBasedMethods:
        file_path = get_latest_file_in_folder(folder)
    else:
        file_path = get_latest_file_in_folder(folder, id=0)  # load from the first agent model of the two
    args.load_model_full_path = file_path

    ### Create env
    env = make_env(args)
    print(env)

    ### Specify models for each agent     
    trained_model = eval(args.algorithm)(env, args)
    args.net_architecture['hidden_dim_list'] = [64, 64, 64, 64]
    
    ## This two lines are critical!
    args.algorithm_spec['episodic_update'] = False  # nash ppo has this as true, should be false since using DQN
    args.algorithm_spec['update_itr'] = 1  # nash dqn has this 0.1, has to make it 1 for fair comparison with other methods

    exploiter = DQN(env, args)
    trained_model.fix()

    model = MultiAgent(env, [trained_model, exploiter], args)  # last arg is save path

    ### Rollout
    rollout(env, model, args, save_id = load_id+'_exploit') # save results of exploitation in a separate folder

if __name__ == '__main__':
    parser.add_argument('--env', type=str, default=None, help='environment')
    parser.add_argument('--method', type=str, default=None, help='method name')
    parser.add_argument('--load_id', type=str, default=None, help='identification number for loading models')
    parser.add_argument('--save_id', type=str, default=None, help='identification number for saving models')
    parser_args = parser.parse_args()
    launch_rollout(parser_args.env, parser_args.method, parser_args.load_id, parser_args.save_id)