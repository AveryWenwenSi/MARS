from mars.utils.common import SelfplayBasedMethods, MetaStrategyMethods
from mars.env.import_env import make_env
from mars.rollout import rollout
from mars.rl.agents  import *
from mars.rl.agents.multiagent import MultiAgent
from general_train import get_general_args
from general_train import get_general_args
from general_exploit import get_latest_file_in_folder

### Load configurations
game_type = 'pettingzoo'
game = ['boxing_v1', 'surround_v1', 'combat_plane_v1', 'pong_v2', 'tennis_v2', 'combat_tank_v1', 'ice_hockey_v1', 'double_dunk_v2'][0]
method = ['selfplay', 'fictitious_selfplay2', 'nash_dqn', 'nash_dqn_exploiter', 'nash_ppo', 'nxdo2'][-1]

args = get_general_args(game_type+'_'+game, method)
print(args)

## Change/specify some arguments if necessary
args.against_baseline = False
args.test = False
args.exploit = True
args.render = False
folder = f'data/model/0/{game_type}_{game}_{method}/'
# folder = f'data/model/20211205_2243/{game_type}_{game}_{method}/'

if method in MetaStrategyMethods:
    file_path = folder
elif method in SelfplayBasedMethods:
    file_path = get_latest_file_in_folder(folder)
else:
    file_path = get_latest_file_in_folder(folder, id=0)  # load from the first agent model of the two
args.load_model_full_path = file_path

### Create env
env = make_env(args)
print(env)

### Specify models for each agent
# args.net_architecture['hidden_dim_list'] = [1024, 1024, 1024, 1024]  
trained_model = eval(args.algorithm)(env, args)
args.net_architecture['hidden_dim_list'] = [64, 64, 64, 64]
# args.net_architecture['hidden_dim_list'] = [256, 256, 256, 256]

## This two lines are critical!
args.algorithm_spec['episodic_update'] = False  # nash ppo has this as true, should be false since using DQN
args.algorithm_spec['update_itr'] = 1  # nash dqn has this 0.1, has to make it 1 for fair comparison with other methods

exploiter = DQN(env, args)
exploiter.reinit()
trained_model.fix()

model = MultiAgent(env, [trained_model, exploiter], args)
# model = MultiAgent(env, [exploiter, trained_model], args)

### Rollout
rollout(env, model, args)