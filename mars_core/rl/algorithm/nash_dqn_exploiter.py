import torch
import torch.nn as nn
import torch.nn.functional as F

import numpy as np
import gym
import operator
import random, copy
from .common.nn_components import cReLU, Flatten
from .common.storage import ReplayBuffer
from .common.rl_utils import choose_optimizer, EpsilonScheduler
from .common.networks import NetBase, get_model
from .dqn import DQN, DQNBase
from .equilibrium_solver import * 

class NashDQNExploiter(DQN):
    """
    Nash-DQN algorithm
    """
    def __init__(self, env, args):
        super().__init__(env, args)
        self.num_envs = args.num_envs
        self.normal_nashQ = NashDQNBase(env, args.net_architecture, args.num_envs).to(self.device)
        self.exploiter_nashQ = NashDQNBase(env, args.net_architecture, args.num_envs).to(self.device)
        self.normal_nashQ_target = copy.deepcopy(self.normal_nashQ).to(self.device)
        self.exploiter_nashQ_target = copy.deepcopy(self.exploiter_nashQ).to(self.device)
        self.num_agents = env.num_agents[0] if isinstance(env.num_agents, list) else env.num_agents
        try:
            self.action_dims = env.action_space[0].n
        except:
            self.action_dims = env.action_space.n
        self.normal_optimizer = choose_optimizer(args.optimizer)(self.normal_nashQ.parameters(), lr=float(args.learning_rate))
        self.exploiter_optimizer = choose_optimizer(args.optimizer)(self.exploiter_nashQ.parameters(), lr=float(args.learning_rate))
        self.exploiter_update_itr = args.algorithm_spec['exploiter_update_itr']

    def choose_action(self, state, Greedy=False, epsilon=None):
        if Greedy:
            epsilon = 0.
        elif epsilon is None:
            epsilon = self.epsilon_scheduler.get_epsilon()
        if not isinstance(state, torch.Tensor):
            state = torch.Tensor(state).to(self.device)
        if self.num_envs == 1: # state: (agents, state_dim)
            state = state.unsqueeze(0).view(1, -1) # change state from (agents, state_dim) to (1, agents*state_dim)
        else: # state: (agents, envs, state_dim)
            state = torch.transpose(state, 0, 1) # to state: (envs, agents, state_dim)
            state = state.view(state.shape[0], -1) # to state: (envs, agents*state_dim)
        print(state)
        if random.random() > epsilon:  # NoisyNet does not use e-greedy
            with torch.no_grad():
                q_values = self.normal_nashQ(state).detach().cpu().numpy()  # needs state: (batch, agents*state_dim)
            actions = self.compute_nash(q_values) 
        else:
            actions = np.random.randint(self.action_dims, size=(state.shape[0], self.num_agents))
        if self.num_envs == 1:
            actions = actions[0]  # list of actions to its item
        else:
            actions = np.array(actions).T  # to shape: (agents, envs, action_dim)
        return actions

    def compute_nash(self, q_values, return_dist=False):
        """
        Return actions as Nash equilibrium of given payoff matrix, shape: [env, agent]
        """
        q_table = q_values.reshape(-1, self.action_dims,  self.action_dims)
        all_actions = []
        all_dists = []
        for qs in q_table:  # iterate over envs
            try:
                # ne = NashEquilibriaSolver(qs)
                # ne = ne[0]  # take the first Nash equilibria found
                # print(np.linalg.det(qs))
                # ne = NashEquilibriumSolver(qs)
                # ne = NashEquilibriumLPSolver(qs)
                # ne = NashEquilibriumCVXPYSolver(qs)
                # ne = NashEquilibriumGUROBISolver(qs)
                ne = NashEquilibriumECOSSolver(qs)
                if not return_dist:
                    print(ne)

            except:  # some cases NE cannot be solved
                print('No Nash solution for: ', np.linalg.det(qs), qs)
                ne = self.num_agents*[1./qs.shape[0]*np.ones(qs.shape[0])]  # use uniform distribution if no NE is found
            actions = []
                
            all_dists.append(ne)

            # Nash DQN with exploiter
            first_player_expected_value = ne[0] @ qs  # Nash distribution of the first player by Q table
            second_player_best_response = [np.argmin(first_player_expected_value)]
            try:
                sample_hist = np.random.multinomial(1, ne[0])  # return one-hot vectors as sample from multinomial
                first_player_sampled_action = np.where(sample_hist>0)[0]
            except:
                print('Not a valid distribution from Nash equilibrium solution.')
            actions = np.array([first_player_sampled_action, second_player_best_response]).reshape(-1)
            all_actions.append(actions)

            # Nash DQN without exploiter
            # for dist in ne:  # iterate over agents
            #     try:
            #         sample_hist = np.random.multinomial(1, dist)  # return one-hot vectors as sample from multinomial
            #     except:
            #         print('Not a valid distribution from Nash equilibrium solution.')
            #         # print(sum(ne[0]), sum(ne[1]))
            #         # print(qs, ne)
            #         # print(dist)
            #     a = np.where(sample_hist>0)
            #     actions.append(a)
            # all_actions.append(np.array(actions).reshape(-1))
        if return_dist:
            return all_dists
        else:
            return np.array(all_actions)

    def update(self):
        state, action, reward, next_state, done = self.buffer.sample(self.batch_size)
        weights = torch.ones(self.batch_size)

        state = torch.FloatTensor(np.float32(state)).to(self.device)
        next_state = torch.FloatTensor(np.float32(next_state)).to(self.device)
        action = torch.LongTensor(action).to(self.device)
        reward = torch.FloatTensor(reward).to(self.device)
        done = torch.FloatTensor(np.float32(done)).to(self.device)
        weights = torch.FloatTensor(weights).to(self.device)

        # Nash DQN update for normal one
        q_values = self.normal_nashQ(state)
        action_dim = int(np.sqrt(q_values.shape[-1])) # for two-symmetric-agent case only
        action = torch.LongTensor([a[0]*action_dim+a[1] for a in action]).to(self.device)
        # target_next_q_values_ = self.normal_nashQ(next_state)  # or use this one
        target_next_q_values_ = self.normal_nashQ_target(next_state)
        target_next_q_values = target_next_q_values_.detach().cpu().numpy()
        q_value = q_values.gather(1, action.unsqueeze(1)).squeeze(1)

        nash_dists = self.compute_nash(target_next_q_values, return_dist=True)  # get the mixed strategy Nash rather than specific actions
        target_next_q_values_ = target_next_q_values_.reshape(-1, action_dim, action_dim)
        nash_dists_  = torch.FloatTensor(nash_dists).to(self.device)
        next_q_value = torch.einsum('bk,bk->b', torch.einsum('bj,bjk->bk', nash_dists_[:, 0], target_next_q_values_), nash_dists_[:, 1])
        expected_q_value = reward + (self.gamma ** self.multi_step) * next_q_value * (1 - done)
        # Huber Loss
        loss = F.smooth_l1_loss(q_value, expected_q_value.detach(), reduction='none')
        loss = (loss * weights).mean()

        self.normal_optimizer.zero_grad()
        loss.backward()
        self.normal_optimizer.step()

        # Nash DQN update for exploiter, probably several steps of update for this TODO
        for _ in range(self.exploiter_update_itr):
            exploiter_q_values = self.exploiter_nashQ(state)
            exploiter_q_value = exploiter_q_values.gather(1, action.unsqueeze(1)).squeeze(1)
            # target_exploiter_next_q_values_ = self.exploiter_nashQ(next_state) # or use this one
            target_exploiter_next_q_values_ = self.exploiter_nashQ_target(next_state)
            target_exploiter_next_q_values = target_exploiter_next_q_values_.detach().cpu().numpy()
            target_exploiter_next_q_values_ = target_exploiter_next_q_values_.reshape(-1, action_dim, action_dim)
            # exploiter_nash_dists = self.compute_nash(target_exploiter_next_q_values, return_dist=True)  # get the mixed strategy Nash rather than specific actions
            # exploiter_nash_dists_  = torch.FloatTensor(exploiter_nash_dists).to(self.device)
            # first_player_expected_value = torch.einsum('bj,bjk->bk', exploiter_nash_dists_[:, 0], target_next_q_values_)
            first_player_expected_value = torch.einsum('bj,bjk->bk', nash_dists_[:, 0], target_exploiter_next_q_values_)
            exploiter_next_q_value, _ = torch.min(first_player_expected_value, dim=-1)  # second player takes the best response to the first player
            expected_exploiter_q_value = reward + (self.gamma ** self.multi_step) * exploiter_next_q_value * (1 - done)

            # Huber Loss
            exploiter_loss = F.smooth_l1_loss(exploiter_q_value, expected_exploiter_q_value.detach(), reduction='none')
            exploiter_loss = (exploiter_loss * weights).mean()

            self.exploiter_optimizer.zero_grad()
            exploiter_loss.backward()
            self.exploiter_optimizer.step()

        if self.update_cnt % self.target_update_interval == 0:
            self.update_target(self.normal_nashQ, self.normal_nashQ_target )
            self.update_target(self.exploiter_nashQ, self.exploiter_nashQ_target )
            self.update_cnt = 0
        self.update_cnt += 1

        return loss.item()

    def save_model(self, path):
        try:  # for PyTorch >= 1.7 to be compatible with loading models from any lower version
            torch.save(self.normal_nashQ.state_dict(), path+'_normal_model', _use_new_zipfile_serialization=False)
            torch.save(self.normal_nashQ_target.state_dict(), path+'_normal_target', _use_new_zipfile_serialization=False)
            torch.save(self.exploiter_nashQ.state_dict(), path+'_exploiter_model', _use_new_zipfile_serialization=False)
            torch.save(self.exploiter_nashQ_target.state_dict(), path+'_exploiter_target', _use_new_zipfile_serialization=False)
        except:
            torch.save(self.normal_nashQ.state_dict(), path+'_normal_model')
            torch.save(self.normal_nashQ_target.state_dict(), path+'_normal_target')
            torch.save(self.exploiter_nashQ.state_dict(), path+'_exploiter_model')
            torch.save(self.exploiter_nashQ_target.state_dict(), path+'_exploiter_target')


    def load_model(self, path, eval=True):
        self.normal_nashQ.load_state_dict(torch.load(path+'_normal_model'))
        self.normal_nashQ_target.load_state_dict(torch.load(path+'_normal_target'))
        self.exploiter_nashQ.load_state_dict(torch.load(path+'_exploiter_model'))
        self.exploiter_nashQ_target.load_state_dict(torch.load(path+'_exploiter_target'))

        if eval:
            self.normal_nashQ.eval()
            self.normal_nashQ_target.eval()
            self.exploiter_nashQ.eval()
            self.exploiter_nashQ_target.eval()

class NashDQNBase(DQNBase):
    """
    Nash-DQN for parallel env sampling

    parameters
    ---------
    env         environment(openai gym)
    """
    def __init__(self, env, net_args, number_envs=2):
        super().__init__(env, net_args)
        self.number_envs = number_envs
        try:
            self._observation_shape = tuple(map(operator.add, env.observation_space.shape, env.observation_space.shape)) # double the shape
            self._action_shape = (env.action_space.n)**2
        except:
            self._observation_shape = tuple(map(operator.add, env.observation_space[0].shape, env.observation_space[0].shape)) # double the shape
            self._action_shape = (env.action_space[0].n)**2
        self._construct_net(env, net_args)

    def _construct_net(self, env, net_args):
            input_space = gym.spaces.Box(low=-np.inf, high=np.inf, shape = self._observation_shape)
            output_space = gym.spaces.Discrete(self._action_shape)
            if len(self._observation_shape) <= 1: # not image
                self.net = get_model('mlp')(input_space, output_space, net_args, model_for='discrete_q')
            else:
                self.net = get_model('cnn')(input_space, output_space, net_args, model_for='discrete_q')
